#+AUTHOR:Ashvin
#+TITLE: Mandlebrot Set
#+PROPERTY: header-args:c :cache yes :noweb yes :tangle yes :exports code
#+STARTUP: latexpreview overview
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_CLASS_OPTIONS: [a4paper,11pt]

\newpage
* Introduction
Mandlebrot set is the set of complex numbers c such that starting from \(z_0 = 0\) and applying:
\[z_{k+1} = z_k^2+c\]
repeateadly,\(\forall k>0\), \(|z_k| \le 2\)  

* Implementation Details
Drawing mandlebrot set is quite easy. All we need to do is map each pixel with a complex number(c) and 
repeat the iteration to a "Max" number. If \(|z_k|\le 2\) upto max iteration then we color the pixel black
else we color it white, or for more fun we might use the iteration count itself for coloring.
Real part of complex number corresponds to x-coordinate, and imaginary part corresponds to y-coordinate.
x-coodinate is columns number of screen, and y is the row number, when we try to map (x,y) of a grid to 
rows and columns of a matrix. The screen in which we plot is a matrix, so we draw such that the center is (0,0) and 
also:
\[|c| > 2 \implies |z_1| > 2\]
\[\implies |c|\le 2\]
 for any chance of convergence.
So, we have to scale our screen or else only very small portion of the screen will have any drawing and that is
no fun. So apply two transformation to (x,y) of each pixel. We first shift the origin to center, then we scale it
such that \(\forall c \in \text{transformed set}, |c| \le 2\) i.e the full screen has the width of 4 i.e radius of 2.
** Transformation
X = \((x-\frac{width}{2})\times \frac{4}{width}\)\\
Y =  \((y-\frac{height}{2})\times \frac{4}{width}\)\\
Note: I have scalled equally in both directions to prevent distortion of image, and y axis is inverted, but this 
doesn't much affect our shape.
** A bit of Complex algebra
Lets say \(z_k = z_{k_r}+z_{k_i}i\) and \(c = c_r+c_ii\) then
\[z_{k+1} = (z_{k_r}^2-z_{k_i}^2+c_r)+(2z_{k_r}z_{k_i}+c_i)i\]
where \(c_r = X\) and \(c_i = Y\).

* Setting up SDL2
To setup SDL2 in windows follow [[https://gist.github.com/thales17/fb2e4cff60890a51d9dddd4c6e832ad2][these instructions.]] Setting up SDL2 in linux follow [[https://gigi.nullneuron.net/gigilabs/how-to-set-up-sdl2-on-linux/][this site]].
* Building
Simply:
#+BEGIN_SRC sh
make mandle.exe
#+END_SRC
* Code

** Headers and function initialization
#+BEGIN_SRC c
  #include <stdio.h>
  #include <stdlib.h>
  #include <math.h>
  #include <SDL2/SDL2_gfxPrimitives.h>
  #include <SDL2/SDL.h>


  #define WIDTH 1200
  #define HEIGHT 650
  #define MAX_ITER 50


  void draw(SDL_Renderer **,int);

  int main(int argc, char *argv[])
  {
    if (SDL_Init(SDL_INIT_VIDEO))
      {
	  printf ("SDL_Init Error: %s", SDL_GetError());
	  return 1;
      }
      SDL_Window *window = NULL;
      SDL_Renderer *renderer = NULL;

      window = SDL_CreateWindow("Mandelbrot Set", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, WIDTH, HEIGHT, SDL_WINDOW_OPENGL);
      if (window == NULL)
      {
	  printf ("SDL_CreateWindow Error: %s", SDL_GetError());
	  SDL_Quit();
	  return 2;
      }

      renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
      if (renderer == NULL)
      {
	  SDL_DestroyWindow(window);
	  printf ("SDL_CreateRenderer Error: %s", SDL_GetError());
	  SDL_Quit();
	  return 3;
      }

      SDL_Event event;
      int quit = 0;

      //Factor is a random number that will spice things up for the image.
      int factor = 1;

      while (!quit){
	  while (SDL_PollEvent(&event))
	  {
	      if (event.type == SDL_QUIT)
		  quit = 1;
	  }

	  //Clear using white color
	  SDL_SetRenderDrawColor(renderer, 255, 255, 255, SDL_ALPHA_OPAQUE);
	  SDL_RenderClear(renderer);

	  //Draw pixels on the renderer
	  draw(&renderer,factor);
	  SDL_RenderPresent(renderer);

	  //Increaseing Factor by 10 each time.
	  factor+=1;

      }

      //free resources
      if (renderer){
	SDL_DestroyRenderer(renderer);
      }
      if (window) {
	SDL_DestroyWindow(window);      
      }

      SDL_Quit();
      return 0;
  }

#+END_SRC
** Main logic
 #+BEGIN_SRC c
   void draw(SDL_Renderer **renderer,int factor){
      for (int x = 0; x < WIDTH; x++) {
	 for (int y =0;  y < HEIGHT; y++) {
	 //Transforming and scaling such that origin is center and  radius of 2 around it. Scaling uniformly for both. Y is still inverted.
	   float c_real = (x - WIDTH/2.0) * (4.0/WIDTH); 
	   float c_img = (y-HEIGHT/2.0) * (4.0/WIDTH); 

	   float z_real = 0;
	   float z_img = 0;
	   int iter_count = 0;
	   while (pow(z_real,2)+pow(z_img,2) <= 4 && iter_count < MAX_ITER) {
	     float temp_real = pow(z_real,2)-pow(z_img,2)+c_real;
	     float temp_img = 2*z_real*z_img + c_img;
	     z_real = temp_real;
	     z_img = temp_img;
	     iter_count++;
	   }

	   //If any number exits before reaching MAX_ITER then, it is not in the set. So colour it with different shade.
	   if (iter_count == MAX_ITER) {
	     //printf("SELECT %.2f %.2f %d %d\n",c_real,c_img,x,y);
	     //Draw with black
	     SDL_SetRenderDrawColor(*renderer, 0,0, 0, SDL_ALPHA_OPAQUE);
	     SDL_RenderDrawPoint(*renderer,x,y);
	   }else{
	      //Draw with custom shade
	     SDL_SetRenderDrawColor(*renderer, iter_count*factor*3,iter_count*factor, iter_count*factor, SDL_ALPHA_OPAQUE);
	     SDL_RenderDrawPoint(*renderer,x,y);
	   }
	 }
      }
   }


 #+END_SRC

